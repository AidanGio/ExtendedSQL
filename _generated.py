
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py



def query():
    load_dotenv()

    user = os.getenv('USERNAME')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    data = cur.fetchall()

    
    H = {}
    for row in data:
        key = (row['cust'], row['prod'], row['state'],)
        if key not in H:
            H[key] = {('1', 'avg', 'quant'): [0, 0], ('2', 'avg', 'quant'): [0, 0], ('3', 'avg', 'quant'): [0, 0], ('4', 'avg', 'quant'): [0, 0]}

    for row in data:
        key = (row['cust'], row['prod'], row['state'],)
        grouping_var = 0
        F = [['1', 'avg', 'quant'], ['2', 'avg', 'quant'], ['3', 'avg', 'quant'], ['4', 'avg', 'quant']]
        for func in F:
            if int(func[0]) == grouping_var:
                field = func[2]
                func_type = func[1]
                # print("Updating:", key, func, "with", row[field])  # Debugging
                if func_type == 'sum':
                    H[key][(func[0], func_type, field)] += row[field]
                elif func_type == 'count':
                    H[key][(func[0], func_type, field)] += 1
                elif func_type == 'min':
                    H[key][(func[0], func_type, field)] = min(H[key][(func[0], func_type, field)], row[field])
                elif func_type == 'max':
                    H[key][(func[0], func_type, field)] = max(H[key][(func[0], func_type, field)], row[field])
                elif func_type == 'avg':
                    H[key][(func[0], func_type, field)][0] += row[field]
                    H[key][(func[0], func_type, field)][1] += 1

    for row in data:
        key = (row['cust'], row['prod'], row['state'],)
        grouping_var = -1
        if row['month'] < 3 and row['year'] == 2020:
            grouping_var = 1
        elif row['month'] >= 3 and row['month'] < 6 and row['year'] == 2020:
            grouping_var = 2
        elif row['month'] >= 6 and row['month'] < 8 and row['year'] == 2020:
            grouping_var = 3
        elif row['month'] >= 8 and row['year'] == 2020:
            grouping_var = 4

        F = [['1', 'avg', 'quant'], ['2', 'avg', 'quant'], ['3', 'avg', 'quant'], ['4', 'avg', 'quant']]
        for func in F:
            if int(func[0]) == grouping_var:
                field = func[2]
                func_type = func[1]
                # print("Updating:", key, func, "with", row[field])  # Debugging
                if func_type == 'sum':
                    H[key][(func[0], func_type, field)] += row[field]
                elif func_type == 'count':
                    H[key][(func[0], func_type, field)] += 1
                elif func_type == 'min':
                    H[key][(func[0], func_type, field)] = min(H[key][(func[0], func_type, field)], row[field])
                elif func_type == 'max':
                    H[key][(func[0], func_type, field)] = max(H[key][(func[0], func_type, field)], row[field])
                elif func_type == 'avg':
                    H[key][(func[0], func_type, field)][0] += row[field]
                    H[key][(func[0], func_type, field)][1] += 1

    _global = []
    # print(H.items())
    for key, value in H.items():
        result = {'cust': key[0], 'prod': key[1], 'state': key[2]}
        for func_key, func_value in value.items(): # func_key = ('1', 'avg', 'quant'), func_value = [0, 0]
            if 'avg' in func_key:
                if func_value[1] == 0:
                    result[func_key] = 0
                else:
                    result[func_key] = func_value[0] / func_value[1]
            else:
                result[func_key] = func_value
        inf = float('inf')
        if result[('1', 'avg', 'quant')] > result[('2', 'avg', 'quant')] and result[('1', 'avg', 'quant')] > result[('3', 'avg', 'quant')] and result[('1', 'avg', 'quant')] > result[('4', 'avg', 'quant')]:
            _global.append(result)
    
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")


def main():
    print(query())
    
if "__main__" == __name__:
    main()
    